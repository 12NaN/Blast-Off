{"version":3,"sources":["components/Footer.js","components/Panels.js","components/Home.js","components/Research.js","components/About.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Footer","react_default","a","createElement","className","Component","Panels","href","Home","Panels_Panels","Research","About","Navbar","HashRouter","NavLink","to","Route","exact","path","component","App","Navbar_Navbar","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRAEqBA,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eACdH,EAAAC,EAAAC,cAAA,4CAL0BE,aCCfC,0LAEjB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,aACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,sBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,mVAIAH,EAAAC,EAAAC,cAAA,KAAGI,KAAK,YAAYH,UAAU,mBAA9B,8BAZ0BC,cCCfG,mLAEjB,OACEP,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,uBAEAF,EAAAC,EAAAC,cAACM,EAAD,cAN0BJ,aCFbK,mLAEjB,OACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,o0DAL8BE,aCAjBM,mLAEjB,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,qWAL2BE,qCCGdO,mLAGjB,OACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,KACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACZH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,IAAIX,UAAU,mBAA1B,SAEFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,YAAYX,UAAU,YAAlC,aAEFH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACZH,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAG,SAASX,UAAU,YAA/B,WAIJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWX,IACjCP,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWT,IACnCT,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAWR,cArBRN,aCYrBe,0LATX,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAD,cALUjB,cCMEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.299304a2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Footer extends Component {\r\n  render(){\r\n    return(\r\n      <footer>\r\n        <span className=\"navbar-text\">\r\n          <h6> Built using ReactJS </h6>\r\n        </span>\r\n      </footer>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nexport default class Panels extends Component {\r\n  render(){\r\n    return(\r\n      <div className=\"container\">\r\n      <div className=\"card\">\r\n        <h5 className=\"card-header\">Blast-Off</h5>\r\n        <div className=\"card-body\">\r\n          <h5 className=\"card-title\">What is Blast-Off?</h5>\r\n          <p className=\"card-text\">A pipeline for our research workflow.\r\n            Hello! If you are reading this, you are most likely a part of our CRSP research group.\r\n            This program with made for the purpose of automating a portion of our workflow and\r\n            make it easier to annotate the staph genes. If you are not a part of our group, below is the abstract for our research project.</p>\r\n          <a href=\"/research\" className=\"btn btn-primary\">See our abstract</a>\r\n        </div>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Panels from './Panels';\r\nimport './style.css';\r\n\r\nexport default class Home extends Component {\r\n  render(){\r\n    return(\r\n      <div>\r\n        <h1>Blast-Off</h1>\r\n\r\n        <Panels/>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Research extends Component {\r\n  render(){\r\n    return(\r\n      <div className=\"container\">\r\n        <h1> Abstract </h1>\r\n        <p>Abstract: Staphylococci are gram-positive aerobic microorganisms. Most strains are persistent and highly diverse bacteria that inhabits the mucous membranes of those who are infected. About 30% of people are unaware that they carriers of the bacterium, as it can inhabit a person’s body without any showing symptoms. However, the bacterium is capable of proliferating through cuts in the skin or the weakening of the infected individual’s immune system. When given ground, the infection can cause symptoms, such as the growth of pimples and boils to large abscesses and the destruction of skin tissue. The diversity of the bacterium comes from its adaptability and resistance towards certain antibiotics. Due to the adaptable nature of the infection, hospitals are unable to sufficiently treat their patients unless adequate information about the strain is known. However, with metagenomic analysis, the direct genetic analysis of genomes contained with an environmental sample, more data on the strains can be collected. Thorough this technique, an adequate selection of antibiotics can be efficiently made to treat the patients. Still, the Multidrug-resistance Genes in Staph species, which are a strain of the infection that has become resistant to the use of multiple antibiotics, are a cause for concern. Owing to the diversity of the bacterium, it is difficult to gather information on the various strains due to their distinct resistances to antibiotics. Using results from the Blast analysis of genes from the staph strain, USA300, a strain of community-associated methicillin-resistant Staphylococcus aureus (MRSA), compared across 161 other genomes, we’re able to properly annotate these genes. Through manual annotation, we’re able to give them informative names and offer proper information about the genes.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class About extends Component {\r\n  render(){\r\n    return(\r\n      <div className=\"container\">\r\n        <h1>About</h1>\r\n        <p> A pipeline for our research workflow.\r\n          Hello! If you are reading this, you are most likely a part of our CRSP research group.\r\n          This program with made for the purpose of automating a portion of our workflow and\r\n          make it easier to annotate the staph genes. If you are not a part of our group, below is the abstract for our research project.</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport Home from './Home';\r\nimport Research from './Research';\r\nimport About from './About';\r\nimport {Route, NavLink, HashRouter} from 'react-router-dom';\r\nexport default class Navbar extends Component{\r\n\r\n  render(){\r\n    return(\r\n      <HashRouter>\r\n        <div>\r\n          <ul className=\"nav nav-tabs\">\r\n            <li className=\"nav-item\">\r\n              <NavLink to=\"/\" className=\"nav-link active\">Home</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink to=\"/research\" className=\"nav-link\">Research</NavLink>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavLink to=\"/about\" className=\"nav-link\">About</NavLink>\r\n            </li>\r\n          </ul>\r\n\r\n          <div className=\"content\">\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route path=\"/research\" component={Research}/>\r\n            <Route path=\"/about\" component={About}/>\r\n          </div>\r\n        </div>\r\n      </HashRouter>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Footer from './components/Footer';\nimport Navbar from './components/Navbar';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar/>\n        <Footer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}